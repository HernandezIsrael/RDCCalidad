
@model Model.Manuales

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="nav-align-center">
    <h3>Registro de nuevo documento</h3>
</div>

<div class="col-sm-10 col-md-offset-1">
    <div class="card">
        <div class="card-header card-header-icon" data-background-color="gray" style="background:#159D93;">
            <i class="material-icons">assignment</i>
        </div>
        <div class="card-content">
            <h4 class="card-title">Crear nuevo manual</h4>

            <a href="@Url.Action("LibManuales","Manuales")" class="btn btn-primary btn-round"><i class="material-icons">reply</i> Regresar</a>

            <br />
            <br />

            @using (Html.BeginForm("AddManual", "Manuales", new { idDelFormulario = "frm-newManual" }))
            {

                @Html.HiddenFor(x => x.IdManual)

                <div class="input-group">

                    <span class="input-group-addon">
                        <i class="material-icons">
                            text_fields
                        </i>
                    </span>

                    @Html.TextBoxFor(x => x.Nombre, new { @class = "form-control bmd-label-floating", @placeholder = "* Nombre del manual", @required = "true" })
                    @Html.ValidationMessageFor(x => x.Nombre, null, new { @class = "badge badge-danger" })

                </div>

                <div class="input-group">

                    <span class="input-group-addon">
                        <i class="material-icons">
                            description
                        </i>
                    </span>

                    @Html.TextAreaFor(x => x.Descripcion, new { @class = "form-control bmd-label-floating", @placeholder = "* ¿Cuál es el propósito de este manual?", @required = "true" })
                    @Html.ValidationMessageFor(x => x.Nombre, null, new { @class = "badge badge-danger" })

                </div>

                <br />
                <br />
                <p class="text-muted">
                    * Área a la que está destinada el manual
                </p>

                if (Model.IdArea != -1)
                {
                    @Html.DropDownListFor(x => x.IdArea, new SelectList(ViewBag.Areas, "Id_CA_Area", "Nombre_Area", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdArea, null, new { @class = "badge badge-danger" })
                }
                else
                {
                    @Html.DropDownListFor(x => x.IdArea, new SelectList(ViewBag.Areas, "Id_CA_Area", "Nombre_Area", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdArea, "* Este campo es obligatorio", new { @class = "badge badge-danger" })
                }

                <br />
                <br />
                <p class="text-muted">
                    * Sistema al que está destinado el manual
                </p>

                if (Model.IdMenu != -1)
                {
                    @Html.DropDownListFor(x => x.IdMenu, new SelectList(ViewBag.Menus, "Id_Menu", "Menu1", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdMenu, null, new { @class = "badge badge-danger" })
                }
                else
                {
                    @Html.DropDownListFor(x => x.IdMenu, new SelectList(ViewBag.Menus, "Id_Menu", "Menu1", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdMenu, "* Este campo es obligatorio", new { @class = "badge badge-danger" })
                }

                <br />
                <br />
                <p class="text-muted">
                    * Tipo de usuario al que está destinado el manual
                </p>

                if (Model.IdTipoUsuario != -1)
                {
                    @Html.DropDownListFor(x => x.IdTipoUsuario, new SelectList(ViewBag.TipoUsuarios, "IdManualesTipoUsuario", "TipoUsuario", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdTipoUsuario, null, new { @class = "badge badge-danger" })
                }
                else
                {
                    @Html.DropDownListFor(x => x.IdTipoUsuario, new SelectList(ViewBag.TipoUsuarios, "IdManualesTipoUsuario", "TipoUsuario", -1), new { @class = "selectpicker", data_style = "btn btn-info btn-round", data_size = "10" })
                    @Html.ValidationMessageFor(x => x.IdTipoUsuario, "* Este campo es obligatorio", new { @class = "badge badge-danger" })
                }

                <br />

                if (Model.IdManual == -1)
                {
                    <div class="alert alert-warning alert-with-icon">
                        <i class="material-icons" data-notify="icon">warning</i>
                        <span data-notify="message"> <b>NOTA:</b> Recuerda que necesitas guardar el registro antes de poder adjuntar el manual. </span>
                    </div>
                }

                <br />

                <p class="text-gray">* El campo es obligatorio</p>

                <button type="submit" class="btn btn-info btn-round">
                    <i class="material-icons">sd_card</i> Guardar
                </button>

            }



        </div>
    </div>
</div>

@if (Model.IdManual != -1)
{
    <div class="col-sm-10 col-md-offset-1">
        <div class="card">
            <div class="card-header card-header-icon" data-background-color="gray" style="background:#159D93;">
                <i class="material-icons">attach_file</i>
            </div>
            <div class="card-content">
                <h4 class="card-title">Subir documento</h4>

                <br />
                <br />

                @using (Html.BeginForm("UploadFile", "Manuales", new { manualId = Model.IdManual }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {

                    <div class="card-content">
                        <div class="material-datatables">
                            <table id="ticketDetailTable" class="table table-striped table-no-bordered table-hover" cellspacing="0" width="100" style="width:100%">
                                <tr>
                                    <td style="width:40%">
                                        <b>Tipo de archivo</b>
                                    </td>
                                    <td class="text-center" style="width:30%">
                                        <b>Subir / Cambiar</b>
                                    </td>
                                    <td class="text-center" style="width:30%">
                                        <b>Decargar</b>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <h4>Manual de usuario</h4>
                                    </td>
                                    <td class="text-center">

                                        @using (Html.BeginForm("UploadFile", "Manuales", new { manualId = Model.IdManual }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            <div class="fileinput fileinput-new text-center" name="UploadFile" id="UploadManualFile" data-provides="fileinput">
                                                <div>
                                                    <span class="btn btn-round btn-primary btn-just-icon btn-file">
                                                        <span class="fileinput-new"><i class="material-icons">attach_file</i></span>
                                                        <span class="fileinput-exists"><i class="material-icons">done</i></span>
                                                        <input type="file" name="file" id="UploadCPago" class="fileinput" />
                                                    </span>
                                                    <button type="submit" class="btn btn-primary btn-round fileinput-exists">
                                                        <i class="material-icons">cloud_upload</i> Subir!
                                                    </button>
                                                </div>
                                            </div>
                                        }

                                    </td>

                                    <td class="text-center">

                                        <a href="@string.Format("{0}", (Model.NombreVirtual == "0" ? "#" : Url.Action("Download", "Manuales", new { name = Model.NombreVirtual, name2= Model.NombreDoc })))" target="_blank" class="@string.Format("{0}", (Model.NombreVirtual != "0")?"btn btn-success btn-just-icon btn-round":"btn btn-danger btn-just-icon btn-round")" rel="tooltip" data-placement="top" title="@string.Format("{0}", (Model.NombreVirtual != "0")?"Descargar":"Aún se ha cargado este archivo")">
                                            <i class="material-icons">
                                                cloud_download
                                            </i>
                                        </a>

                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
}